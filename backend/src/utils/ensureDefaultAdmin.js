const crypto=require('crypto');
const User=require('../models/User');
const config=require('../config/config');

const MIN_PASSWORD_LENGTH=8;

function resolveAdminPassword(){
    if(config.DEFAULT_ADMIN_PASSWORD && config.DEFAULT_ADMIN_PASSWORD.length>=MIN_PASSWORD_LENGTH){
        return { password:config.DEFAULT_ADMIN_PASSWORD, autogenerated:false };
    }

    const password=`Adm_${crypto.randomBytes(6).toString('base64url')}`;
    return { password, autogenerated:true };
}

async function ensureDefaultAdmin(){
    const email=config.DEFAULT_ADMIN_EMAIL;
    const name=config.DEFAULT_ADMIN_NAME;
    const forceReset=config.DEFAULT_ADMIN_FORCE_RESET;
    const { password, autogenerated }=resolveAdminPassword();

    let admin=await User.findOne({ email });

    if(!admin){
        admin=new User({
            name,
            email,
            password,
            role:'admin'
        });

        await admin.save();
        console.log(`Default admin account created for ${email}`);

        if(autogenerated){
            console.warn('A temporary admin password was generated:', password);
            console.warn('Set DEFAULT_ADMIN_PASSWORD in the backend/.env file to override it.');
        }

        return;
    }

    const updates={};

    if(admin.role!=='admin'){
        updates.role='admin';
    }

    if(!admin.name){
        updates.name=name;
    }

    if(forceReset){
        updates.password=password;
    }

    if(Object.keys(updates).length>0){
        admin.set(updates);
        await admin.save();
        console.log('Default admin account synchronized.');

        if(forceReset && autogenerated){
            console.warn('A temporary admin password was generated:', password);
            console.warn('Set DEFAULT_ADMIN_PASSWORD in the backend/.env file to override it.');
        }
    }
}

module.exports={ ensureDefaultAdmin };
